import numpy as np
import pandas as pd
import re
import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense
# Download the dataset
!wget -O dataset.txt "https://www.gutenberg.org/files/1342/1342-0.txt"

# Load the dataset
with open('dataset.txt', 'r', encoding='utf-8') as file:
    text = file.read()

# Preprocessing: Remove unwanted characters and split into sentences
text = re.sub(r'[^a-zA-Z\s]', '', text) #remove everything other than letters or spaces
sentences = text.lower().split('\n') #splits whole text dataset into sentences

# Tokenize the text
tokenizer = Tokenizer()
tokenizer.fit_on_texts(sentences) #cnverts sentence to vocabulary with every word having an index
total_words = len(tokenizer.word_index) + 1 #creates dictionary with word and index as keyvalue pair

# Create input sequences using ngram model to learn the word order
input_sequences = []
for sentence in sentences:
    token_list = tokenizer.texts_to_sequences([sentence])[0]
    for i in range(1, len(token_list)):
        n_gram_sequence = token_list[:i+1]
        input_sequences.append(n_gram_sequence)

# Pad sequences according to the max sewquence length
max_sequence_length = max([len(seq) for seq in input_sequences]) #longest sequence
input_sequences = pad_sequences(input_sequences, maxlen=max_sequence_length, padding='pre')

# Split into predictors and label
#x:all words expcept the last one
#y:last word that we will predict
X, y = input_sequences[:,:-1], input_sequences[:,-1]
y = tf.keras.utils.to_categorical(y, num_classes=total_words)

#LSMT Model:
#Embedding(total_words, 100): Converts words into 100-dimensional vectors.
#LSTM(150): An LSTM layer with 150 memory cells (more means better learning but slower training).
#Dense(total_words, activation='softmax'): Predicts one word from the vocabulary.

#categorical_crossentropy: Loss function for multi-class classification.

#model
model = Sequential()
model.add(Embedding(total_words, 100, input_length=max_sequence_length-1))
model.add(LSTM(150))
model.add(Dense(total_words, activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

#seed text:start text
def predict_next_words(seed_text, next_words, model, max_sequence_length):
    for _ in range(next_words):
        token_list = tokenizer.texts_to_sequences([seed_text])[0]
        token_list = pad_sequences([token_list], maxlen=max_sequence_length-1, padding='pre')
        predicted = model.predict(token_list, verbose=0)
        output_word = ""
        for word, index in tokenizer.word_index.items():
            if index == np.argmax(predicted):
                output_word = word
                break
        seed_text += " " + output_word
    return seed_text

seed_text = "I have been told about you, then"
next_words = 5
print(predict_next_words(seed_text, next_words, model, max_sequence_length))

